#!/bin/sh
#
# Copyright 1995, by Hewlett-Packard Company
#
# The code in this file is from the book "Shell Programming
# Examples" by Bruce Blinn, published by Prentice Hall.
# This file may be copied free of charge for personal,
# non-commercial use provided that this notice appears in
# all copies of the file.  There is no warranty, either
# expressed or implied, supplied with this code.
#
# このファイルのコードはBruce Blinn著、Prentice Hall刊行の
# 「Shell Programming Examples」に掲載されていたものです。
# このファイルは、個人として営利を目的とせず利用する限り、
# 無償で複製してかまいません。その場合、複製のすべてに
# この説明文が含まれている必要があります。このコードに
# 関しては、明示的にも暗黙的にもいかなる保証も行いません。
#
# 名称
#    ptree - プロセスの親子関係をツリー構造で出力する
#
# 書式
#    ptree [-n] [pid]
#    ptree [-n] [pid] [level] [datafile]
#
# 解説
#    これはプロセスＩＤをもとにしてプロセスの親子関係を
#    ツリー構造にして表示するシェルスクリプトである。
#    指定されたプロセスＩＤ（PID）を一番上の親として処理する。
#    ユーザは上段の書式で実行する。プロセスＩＤを引数に
#    指定しなかった場合は１をデフォルトとして使用する。
#
#    下段の書式はこのシェルスクリプトが自分自身を再帰的に
#    呼び出すときの書式であり、ツリー構造の次の段階を表示する。
#
#    -n   再帰的な処理を行わせないオプション
#
# リターン値
#    0    正常終了
#    1    ユーザの指定間違い
#
############################################################
LANG=C; export LANG      # 日本語だと困る場合がある 
PATH=$PATH:`dirname $0`

. SystemType.sh

CMDNAME=`basename $0`
USAGE="Usage: $CMDNAME [-n] [pid]"
RECURSIVE=TRUE           # 再帰的にプロセスを表示させるフラグ
PROCESS=                 # 一番親となるプロセスＩＤ
LEVEL=                   # 親子関係のレベル（数値）
DATAFILE=                # ps コマンドの出力データに手を加えたもの
PSFILE=/tmp/ps.$$        # ps コマンドの出力を代入
PS_OPTS=                 # ps コマンドのオプション
OLD_IFS=$IFS             # もとの IFS 変数の値
SYSTEM=`SystemType`      # そのシステムの名称

#
# 一時的に利用する変数
#
PID=                     # プロセスＩＤ
PRTPID=                  # そのプロセスの親のプロセスＩＤ
OWNER=                   # そのプロセスの所有者
NAME=                    # プロセスの名称
LINE=                    # データファイルの１行
OUTLINE=                 # 出力行
INDENT=                  # 何カラム目から出力させるか

trap 'rm -f /tmp/*.$$; exit 1' 1 2 3 15

FillLine() {
     #
     # 文字数が指定した数になるまで空白を追加する関数
     #
     # 書式
     #    FillLine line column
     #
     _LINE="$1"
     _COLUMN=$2
     _LEN=`expr "$_LINE" : '.*'`
     while [ $_LEN -lt $_COLUMN ]
     do
          _LINE="$_LINE "
          _COLUMN=`expr $_COLUMN - 1`
     done

     echo "$_LINE"
}

while :
do
     case $1 in
          -n)  RECURSIVE=FALSE
               shift
               ;;
          --)  shift
               break
               ;;
          -*)  echo "$USAGE" 1>&2
               exit 1
               ;;
          *)   break
               ;;
     esac
done

#
# このスクリプトの受け取る引数の数の確認
#
if [ $# -eq 0 ]; then
     PROCESS=1
     LEVEL=0
     DATAFILE=/tmp/ptree.$$
elif [ $# -eq 1 ]; then
     PROCESS=$1
     LEVEL=0
     DATAFILE=/tmp/ptree.$$
elif [ $# -eq 3 ]; then
     PROCESS=$1
     LEVEL=$2
     DATAFILE=$3
else
     echo "$USAGE" 1>&2
     exit 1
fi

if [ "$LEVEL" = 0 ]; then
     #
     # ps コマンドで使うオプションの切り分け
     #
     case $SYSTEM in
          LINUX )             PS_OPTS="alxw"      ;;
          FREEBSD )           PS_OPTS="-alxw"     ;;
          SUNBSD | ULTRIX )   PS_OPTS="-auwx"     ;;
          * )                 PS_OPTS="-ef"       ;;
     esac

     #
     # もとになるデータファイルを作成
     #
     rm -f $DATAFILE $PSFILE
     ps $PS_OPTS | sed '1d' | sort >$PSFILE

     exec <$PSFILE
     IFS=
     while read LINE
     do
          IFS=$OLD_IFS

          set $LINE
          if [ $SYSTEM = LINUX ]; then
              shift
          fi 
          OWNER=$1
          PID=$2
          PRTPID=$3

          #
          # プロセス名称の始まるカラム
          #
          case $SYSTEM in
               LINUX )                       COL=70 ;;
               FREEBSD )                     COL=68 ;;
               AIX | HP | SGI | SOLARIS )    COL=48 ;;
               SUNBSD | DECOSF )             COL=57 ;;
               ULTRIX )                      COL=51 ;;
               * )  echo "Unexpected system type." 1>&2
                    exit 1
                    ;;
          esac

          LINE=`echo "$LINE" | cut -c$COL-`
          set dummy $LINE
          shift
          NAME=$1

          echo $PID $PRTPID $OWNER $NAME >>$DATAFILE
          IFS=
     done
     IFS=$OLD_IFS
fi

#
# 該当するプロセスを出力
#
INDENT=`expr $LEVEL \* 2`
OUTLINE=`FillLine "" $INDENT`

LINE=`grep "^$PROCESS " $DATAFILE`
if [ "$LINE" = "" ]; then
    echo "No such process: $PROCESS" 1>&2
    exit 1
fi
set $LINE
OUTLINE="$OUTLINE  $1"
OUTLINE=`FillLine "$OUTLINE" 30`
OUTLINE="$OUTLINE  $3	$4"
echo "$OUTLINE"

if [ "$RECURSIVE" = "TRUE" ];then
     LEVEL=`expr $LEVEL + 1`
     while read LINE
     do
          set dummy $LINE
          shift
          #
          # 現プロセスの子供だったらこのコマンド（$0）を
          # 再帰的に呼び出す
          #
          if [ "$2" = "$PROCESS" ]; then
               $0 $1 $LEVEL $DATAFILE
          fi
     done <$DATAFILE
fi

rm -f /tmp/*.$$
exit 0
